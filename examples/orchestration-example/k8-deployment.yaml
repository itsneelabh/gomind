apiVersion: v1
kind: ConfigMap
metadata:
  name: orchestrator-config
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-modal-orchestrator
    app.kubernetes.io/component: config
data:
  # Orchestration Configuration
  ORCHESTRATOR_MODE: "hybrid"
  MAX_CONCURRENCY: "10"
  STEP_TIMEOUT: "30s"
  TOTAL_TIMEOUT: "2m"
  RETRY_ATTEMPTS: "2"
  
  # AI Configuration
  AI_PROVIDER: "openai"
  AI_MODEL: "gpt-4"
  AI_TEMPERATURE: "0.3"
  AI_MAX_TOKENS: "1000"
  
  # Service Configuration
  PORT: "8080"
  GIN_MODE: "release"
  LOG_LEVEL: "info"
  
  # Metrics Configuration
  METRICS_ENABLED: "true"
  PROMETHEUS_PORT: "9090"
  
  # Service Discovery Configuration
  SERVICE_NAME: "multi-modal-orchestrator"
  NAMESPACE: "gomind-examples"

  # Redis Configuration (for service discovery and caching)
  REDIS_URL: "redis://redis:6379"

  # Telemetry Configuration
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4318"
  CACHE_ENABLED: "true"
  CACHE_TTL: "5m"
---
apiVersion: v1
kind: Secret
metadata:
  name: orchestrator-secrets
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-modal-orchestrator
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Base64 encoded secrets - replace with actual values
  OPENAI_API_KEY: "your-base64-encoded-openai-api-key"
  # Example: echo -n "sk-your-key-here" | base64
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: multi-modal-orchestrator
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-modal-orchestrator
    app.kubernetes.io/component: orchestrator
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/part-of: gomind-framework
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: multi-modal-orchestrator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: multi-modal-orchestrator
        app.kubernetes.io/component: orchestrator
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: orchestrator-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: orchestrator
        image: orchestration-example:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        # Load configuration from ConfigMap
        - name: ORCHESTRATOR_MODE
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: ORCHESTRATOR_MODE
        - name: MAX_CONCURRENCY
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: MAX_CONCURRENCY
        - name: STEP_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: STEP_TIMEOUT
        - name: TOTAL_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: TOTAL_TIMEOUT
        - name: RETRY_ATTEMPTS
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: RETRY_ATTEMPTS
        - name: AI_PROVIDER
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: AI_PROVIDER
        - name: AI_MODEL
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: AI_MODEL
        - name: AI_TEMPERATURE
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: AI_TEMPERATURE
        - name: AI_MAX_TOKENS
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: AI_MAX_TOKENS
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: PORT
        - name: GIN_MODE
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: GIN_MODE
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: LOG_LEVEL
        - name: METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: METRICS_ENABLED
        - name: PROMETHEUS_PORT
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: PROMETHEUS_PORT
        - name: SERVICE_NAME
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: SERVICE_NAME
        - name: NAMESPACE
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: NAMESPACE
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: REDIS_URL
        - name: CACHE_ENABLED
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: CACHE_ENABLED
        - name: CACHE_TTL
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: CACHE_TTL
        # Load secrets
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: OPENAI_API_KEY
        # Pod metadata for service discovery
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - multi-modal-orchestrator
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "gomind.ai/orchestrator"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: orchestrator-service
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-modal-orchestrator
    app.kubernetes.io/component: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: multi-modal-orchestrator
---
apiVersion: v1
kind: Service
metadata:
  name: orchestrator-headless
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-modal-orchestrator
    app.kubernetes.io/component: headless-service
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: multi-modal-orchestrator
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: orchestrator-service-account
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-modal-orchestrator
    app.kubernetes.io/component: service-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: orchestrator-role
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-modal-orchestrator
    app.kubernetes.io/component: role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: orchestrator-role-binding
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-modal-orchestrator
    app.kubernetes.io/component: role-binding
subjects:
- kind: ServiceAccount
  name: orchestrator-service-account
  namespace: gomind-examples
roleRef:
  kind: Role
  name: orchestrator-role
  apiGroup: rbac.authorization.k8s.io
---
# Ingress for Orchestration Example (Cloud Provider Specific)
#
# NOTE: Ingress resources are commented out for cloud compatibility.
# Each cloud provider uses different ingress controllers and annotations.
#
# See k8-deployment/grafana.yaml for complete cloud-specific examples.
# Uncomment and modify the appropriate configuration for your environment.
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: orchestrator-pdb
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-modal-orchestrator
    app.kubernetes.io/component: pod-disruption-budget
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: multi-modal-orchestrator
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: orchestrator-hpa
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-modal-orchestrator
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: multi-modal-orchestrator
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max