apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: gomind-examples
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
    spec:
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/provisioning
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-config
        configMap:
          name: grafana-config
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: gomind-examples
  labels:
    app: grafana
    component: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    name: http
  selector:
    app: grafana
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: gomind-examples
  labels:
    app: grafana
    component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  # Storage class options for different cloud providers:
  # storageClassName: gp3-csi         # EKS (recommended) - 20% cheaper than gp2
  # storageClassName: premium-rwo     # GKE (SSD) - better performance
  # storageClassName: standard-rwo    # GKE (Standard) - cheaper option
  # storageClassName: managed-premium # AKS (Premium SSD) - better performance
  # storageClassName: managed-csi     # AKS (Standard) - default
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: gomind-examples
  labels:
    app: grafana
    component: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
    - name: Jaeger
      type: jaeger
      access: proxy
      url: http://jaeger-query
      
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'gomind'
      orgId: 1
      folder: 'GoMind'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

  gomind-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "GoMind Framework Overview",
        "tags": ["gomind", "framework"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Component Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=~\"gomind-.*\"}",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total[5m])",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{status=~\"5..\"}[5m])",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "5s"
      }
    }

  gomind-tools.json: |
    {
      "dashboard": {
        "id": null,
        "title": "GoMind Tools Dashboard",
        "tags": ["gomind", "tools"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Tool Availability",
            "type": "stat",
            "targets": [
              {
                "expr": "count(up{gomind_framework_type=\"tool\"} == 1)",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 4, "w": 6, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Tool Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{gomind_framework_type=\"tool\"}[5m])) by (app)",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 18, "x": 6, "y": 0}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "5s"
      }
    }

  gomind-agents.json: |
    {
      "dashboard": {
        "id": null,
        "title": "GoMind Agents Dashboard",
        "tags": ["gomind", "agents"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Agent Availability",
            "type": "stat",
            "targets": [
              {
                "expr": "count(up{gomind_framework_type=\"agent\"} == 1)",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 4, "w": 6, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Agent Orchestrations",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(orchestration_requests_total[5m])) by (agent)",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 18, "x": 6, "y": 0}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "5s"
      }
    }
---
# Ingress for Grafana (Cloud Provider Specific - Choose One)
#
# NOTE: Ingress resources are commented out for cloud compatibility.
# Uncomment and modify based on your cloud provider:
#
# FOR KIND/NGINX INGRESS:
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: grafana-ingress
#   namespace: gomind-examples
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /
# spec:
#   ingressClassName: nginx
#   rules:
#   - host: grafana.local
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: grafana
#             port:
#               number: 80
#
# FOR EKS (AWS Load Balancer Controller):
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: grafana-ingress
#   namespace: gomind-examples
#   annotations:
#     alb.ingress.kubernetes.io/scheme: internet-facing
#     alb.ingress.kubernetes.io/target-type: ip
#     alb.ingress.kubernetes.io/load-balancer-name: grafana-alb
# spec:
#   ingressClassName: alb
#   rules:
#   - host: grafana.yourdomain.com
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: grafana
#             port:
#               number: 80
#
# FOR GKE (GCE Ingress Controller):
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: grafana-ingress
#   namespace: gomind-examples
#   annotations:
#     kubernetes.io/ingress.class: "gce"
#     kubernetes.io/ingress.global-static-ip-name: "grafana-ip"
# spec:
#   rules:
#   - host: grafana.yourdomain.com
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: grafana
#             port:
#               number: 80
#
# FOR AKS (Application Gateway):
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: grafana-ingress
#   namespace: gomind-examples
#   annotations:
#     kubernetes.io/ingress.class: azure/application-gateway
# spec:
#   rules:
#   - host: grafana.yourdomain.com
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: grafana
#             port:
#               number: 80