apiVersion: v1
kind: ConfigMap
metadata:
  name: ai-first-agent-config
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: ai-first-agent
    app.kubernetes.io/component: config
data:
  # Agent Configuration
  RESEARCH_DEPTH: "comprehensive"
  MAX_CONCURRENT_REQUESTS: "10"
  CACHE_ENABLED: "true"

  # AI Configuration
  AI_PROVIDER: "openai"

  # Service Configuration
  PORT: "8080"
  LOG_LEVEL: "info"

  # Metrics Configuration
  METRICS_ENABLED: "true"
  PROMETHEUS_PORT: "9090"

  # Service Discovery Configuration
  SERVICE_NAME: "ai-first-agent"
  NAMESPACE: "gomind-examples"

  # Redis Configuration for Service Discovery
  REDIS_URL: "redis://redis:6379"

  # Telemetry Configuration
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4318"

  # AI Tools Configuration
  AI_TOOLS_MODE: "composite"
  INTERACTIVE_DEMOS: "true"
---
apiVersion: v1
kind: Secret
metadata:
  name: ai-first-agent-secrets
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: ai-first-agent
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Base64 encoded API keys - replace with actual values
  OPENAI_API_KEY: "your-base64-encoded-openai-api-key"
  GROQ_API_KEY: "your-base64-encoded-groq-api-key"
  ANTHROPIC_API_KEY: "your-base64-encoded-anthropic-api-key"
  # Example: echo -n "sk-your-key-here" | base64
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-first-agent
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: ai-first-agent
    app.kubernetes.io/component: ai-agent
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/part-of: gomind-framework
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ai-first-agent
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ai-first-agent
        app.kubernetes.io/component: ai-agent
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ai-first-agent-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: ai-first-agent
        image: ai-first-agent-example:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: ai-first-agent-config
              key: PORT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: ai-first-agent-config
              key: LOG_LEVEL
        - name: METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: ai-first-agent-config
              key: METRICS_ENABLED
        - name: PROMETHEUS_PORT
          valueFrom:
            configMapKeyRef:
              name: ai-first-agent-config
              key: PROMETHEUS_PORT
        - name: SERVICE_NAME
          valueFrom:
            configMapKeyRef:
              name: ai-first-agent-config
              key: SERVICE_NAME
        - name: NAMESPACE
          valueFrom:
            configMapKeyRef:
              name: ai-first-agent-config
              key: NAMESPACE
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: ai-first-agent-config
              key: REDIS_URL
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: ai-first-agent-config
              key: OTEL_EXPORTER_OTLP_ENDPOINT
        - name: AI_PROVIDER
          valueFrom:
            configMapKeyRef:
              name: ai-first-agent-config
              key: AI_PROVIDER
        - name: RESEARCH_DEPTH
          valueFrom:
            configMapKeyRef:
              name: ai-first-agent-config
              key: RESEARCH_DEPTH
        - name: MAX_CONCURRENT_REQUESTS
          valueFrom:
            configMapKeyRef:
              name: ai-first-agent-config
              key: MAX_CONCURRENT_REQUESTS
        - name: CACHE_ENABLED
          valueFrom:
            configMapKeyRef:
              name: ai-first-agent-config
              key: CACHE_ENABLED
        - name: AI_TOOLS_MODE
          valueFrom:
            configMapKeyRef:
              name: ai-first-agent-config
              key: AI_TOOLS_MODE
        - name: INTERACTIVE_DEMOS
          valueFrom:
            configMapKeyRef:
              name: ai-first-agent-config
              key: INTERACTIVE_DEMOS
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: OPENAI_API_KEY
              optional: true
        - name: GROQ_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: GROQ_API_KEY
              optional: true
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: ANTHROPIC_API_KEY
              optional: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/capabilities
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: ai-first-agent-service
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: ai-first-agent
    app.kubernetes.io/component: ai-agent
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app.kubernetes.io/name: ai-first-agent
---
apiVersion: v1
kind: Service
metadata:
  name: ai-first-agent-headless
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: ai-first-agent
    app.kubernetes.io/component: ai-agent
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: ai-first-agent
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ai-first-agent-service-account
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: ai-first-agent
    app.kubernetes.io/component: service-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ai-first-agent-role
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: ai-first-agent
    app.kubernetes.io/component: rbac
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ai-first-agent-role-binding
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: ai-first-agent
    app.kubernetes.io/component: rbac
subjects:
- kind: ServiceAccount
  name: ai-first-agent-service-account
  namespace: gomind-examples
roleRef:
  kind: Role
  name: ai-first-agent-role
  apiGroup: rbac.authorization.k8s.io
---
# Ingress for AI Agent (Cloud Provider Specific - Choose One)
#
# NOTE: Ingress resources are commented out for cloud compatibility.
# See k8-deployment/grafana.yaml for complete cloud-specific examples.
#
# FOR KIND/NGINX INGRESS:
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: ai-first-agent-ingress
#   namespace: gomind-examples
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /
#     nginx.ingress.kubernetes.io/cors-allow-origin: "*"
#     nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
#     nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type, Authorization"
# spec:
#   ingressClassName: nginx
#   rules:
#   - host: ai-first-agent.local
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: ai-first-agent-service
#             port:
#               number: 80
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ai-first-agent-pdb
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: ai-first-agent
    app.kubernetes.io/component: availability
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: ai-first-agent
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ai-first-agent-hpa
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: ai-first-agent
    app.kubernetes.io/component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ai-first-agent
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80