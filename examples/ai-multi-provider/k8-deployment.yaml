apiVersion: v1
kind: ConfigMap
metadata:
  name: multi-provider-config
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-provider-ai
    app.kubernetes.io/component: config
data:
  # Multi-Provider Configuration
  DEPLOYMENT_MODE: "both"
  TOOL_PORT: "8085"
  AGENT_PORT: "8086"
  HEALTH_CHECK_PORT: "8085"
  
  # Fallback Configuration
  MAX_RETRY_ATTEMPTS: "3"
  PROVIDER_TIMEOUT: "30s"
  HEALTH_CHECK_INTERVAL: "60s"
  PARALLEL_EXECUTION: "true"
  
  # Service Configuration
  LOG_LEVEL: "info"
  METRICS_ENABLED: "true"
  
  # Framework Configuration
  NAMESPACE: "gomind-examples"

  # Redis Configuration for Service Discovery
  REDIS_URL: "redis://redis:6379"

  # Telemetry Configuration
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4318"
  
  # Performance Configuration
  CONCURRENT_REQUESTS: "10"
  REQUEST_TIMEOUT: "60s"
  CACHE_RESPONSES: "true"
---
apiVersion: v1
kind: Secret
metadata:
  name: multi-provider-secrets
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-provider-ai
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Base64 encoded API keys - minimum 2 required for fallback functionality
  OPENAI_API_KEY: "your-base64-encoded-openai-api-key"         # Primary provider
  GROQ_API_KEY: "your-base64-encoded-groq-api-key"             # Fallback provider (fast)
  ANTHROPIC_API_KEY: "your-base64-encoded-anthropic-api-key"   # Secondary provider
  DEEPSEEK_API_KEY: "your-base64-encoded-deepseek-api-key"     # Additional provider
  GEMINI_API_KEY: "your-base64-encoded-gemini-api-key"         # Additional provider
  # Example: echo -n "sk-your-key-here" | base64
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: multi-provider-ai
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-provider-ai
    app.kubernetes.io/component: ai-service
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/part-of: gomind-framework
    gomind.framework/type: "hybrid"
    gomind.framework/ai-powered: "true"
    gomind.framework/multi-provider: "true"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: multi-provider-ai
  template:
    metadata:
      labels:
        app.kubernetes.io/name: multi-provider-ai
        app.kubernetes.io/component: ai-service
        app.kubernetes.io/version: "1.0.0"
        gomind.framework/type: "hybrid"
        gomind.framework/ai-powered: "true"
        gomind.framework/multi-provider: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: multi-provider-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: multi-provider-ai
        image: multi-provider-ai-example:latest
        imagePullPolicy: Always
        ports:
        - name: tool-port
          containerPort: 8085
          protocol: TCP
        - name: agent-port
          containerPort: 8086
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        # Load configuration from ConfigMap
        - name: DEPLOYMENT_MODE
          valueFrom:
            configMapKeyRef:
              name: multi-provider-config
              key: DEPLOYMENT_MODE
        - name: TOOL_PORT
          valueFrom:
            configMapKeyRef:
              name: multi-provider-config
              key: TOOL_PORT
        - name: AGENT_PORT
          valueFrom:
            configMapKeyRef:
              name: multi-provider-config
              key: AGENT_PORT
        - name: HEALTH_CHECK_PORT
          valueFrom:
            configMapKeyRef:
              name: multi-provider-config
              key: HEALTH_CHECK_PORT
        - name: MAX_RETRY_ATTEMPTS
          valueFrom:
            configMapKeyRef:
              name: multi-provider-config
              key: MAX_RETRY_ATTEMPTS
        - name: PROVIDER_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: multi-provider-config
              key: PROVIDER_TIMEOUT
        - name: HEALTH_CHECK_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: multi-provider-config
              key: HEALTH_CHECK_INTERVAL
        - name: PARALLEL_EXECUTION
          valueFrom:
            configMapKeyRef:
              name: multi-provider-config
              key: PARALLEL_EXECUTION
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: multi-provider-config
              key: LOG_LEVEL
        - name: METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: multi-provider-config
              key: METRICS_ENABLED
        - name: NAMESPACE
          valueFrom:
            configMapKeyRef:
              name: multi-provider-config
              key: NAMESPACE
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: multi-provider-config
              key: REDIS_URL
        - name: CONCURRENT_REQUESTS
          valueFrom:
            configMapKeyRef:
              name: multi-provider-config
              key: CONCURRENT_REQUESTS
        - name: REQUEST_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: multi-provider-config
              key: REQUEST_TIMEOUT
        - name: CACHE_RESPONSES
          valueFrom:
            configMapKeyRef:
              name: multi-provider-config
              key: CACHE_RESPONSES
        # Load AI provider secrets (minimum 2 required)
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: OPENAI_API_KEY
              optional: true
        - name: GROQ_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: GROQ_API_KEY
              optional: true
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: ANTHROPIC_API_KEY
              optional: true
        - name: DEEPSEEK_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: DEEPSEEK_API_KEY
              optional: true
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: GEMINI_API_KEY
              optional: true
        # Pod metadata for service discovery
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 300m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: tool-port
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: tool-port
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: tool-port
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: ai-cache
          mountPath: /app/cache
        - name: provider-cache
          mountPath: /app/provider-cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: ai-cache
        emptyDir: {}
      - name: provider-cache
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - multi-provider-ai
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "gomind.ai/multi-provider"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: multi-provider-tool-service
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-provider-ai
    app.kubernetes.io/component: tool-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: tool-http
    port: 80
    targetPort: tool-port
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: multi-provider-ai
---
apiVersion: v1
kind: Service
metadata:
  name: multi-provider-agent-service
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-provider-ai
    app.kubernetes.io/component: agent-service
spec:
  type: ClusterIP
  ports:
  - name: agent-http
    port: 80
    targetPort: agent-port
    protocol: TCP
  selector:
    app.kubernetes.io/name: multi-provider-ai
---
apiVersion: v1
kind: Service
metadata:
  name: multi-provider-headless
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-provider-ai
    app.kubernetes.io/component: headless-service
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: tool-http
    port: 8085
    targetPort: tool-port
    protocol: TCP
  - name: agent-http
    port: 8086
    targetPort: agent-port
    protocol: TCP
  selector:
    app.kubernetes.io/name: multi-provider-ai
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: multi-provider-service-account
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-provider-ai
    app.kubernetes.io/component: service-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: multi-provider-role
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-provider-ai
    app.kubernetes.io/component: role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: multi-provider-role-binding
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-provider-ai
    app.kubernetes.io/component: role-binding
subjects:
- kind: ServiceAccount
  name: multi-provider-service-account
  namespace: gomind-examples
roleRef:
  kind: Role
  name: multi-provider-role
  apiGroup: rbac.authorization.k8s.io
---
# Ingress for Multi-Provider AI (Cloud Provider Specific)
#
# NOTE: Ingress resources are commented out for cloud compatibility.
# Each cloud provider uses different ingress controllers and annotations:
#
# - KIND: Uses NGINX ingress controller
# - EKS:  Uses AWS Load Balancer Controller (ALB)
# - GKE:  Uses GCE ingress controller
# - AKS:  Uses Application Gateway or NGINX
#
# See k8-deployment/grafana.yaml for complete cloud-specific examples.
# Uncomment and modify the appropriate configuration for your environment.
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: multi-provider-pdb
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-provider-ai
    app.kubernetes.io/component: pod-disruption-budget
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: multi-provider-ai
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: multi-provider-hpa
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: multi-provider-ai
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: multi-provider-ai
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max