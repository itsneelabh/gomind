apiVersion: v1
kind: ConfigMap
metadata:
  name: enhanced-agent-config
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: research-agent-enhanced
    app.kubernetes.io/component: config
data:
  # Agent Configuration
  RESEARCH_DEPTH: "comprehensive"
  MAX_CONCURRENT_REQUESTS: "10"
  CACHE_ENABLED: "true"
  
  # AI Configuration
  AI_PROVIDER: "openai"
  
  # Service Configuration
  PORT: "8080"
  LOG_LEVEL: "info"
  
  # Metrics Configuration
  METRICS_ENABLED: "true"
  PROMETHEUS_PORT: "9090"
  
  # Service Discovery Configuration
  SERVICE_NAME: "research-agent-enhanced"
  NAMESPACE: "gomind-examples"
  
  # Redis Configuration
  REDIS_URL: "redis://redis:6379"

  # Telemetry Configuration
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4318"
---
apiVersion: v1
kind: Secret
metadata:
  name: enhanced-agent-secrets
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: research-agent-enhanced
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Base64 encoded API keys - replace with actual values
  OPENAI_API_KEY: "your-base64-encoded-openai-api-key"
  GROQ_API_KEY: "your-base64-encoded-groq-api-key"
  ANTHROPIC_API_KEY: "your-base64-encoded-anthropic-api-key"
  # Example: echo -n "sk-your-key-here" | base64
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: research-agent-enhanced
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: research-agent-enhanced
    app.kubernetes.io/component: research-agent
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/part-of: gomind-framework
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: research-agent-enhanced
  template:
    metadata:
      labels:
        app.kubernetes.io/name: research-agent-enhanced
        app.kubernetes.io/component: research-agent
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: enhanced-agent-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: research-agent
        image: research-agent-enhanced-example:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        # Load configuration from ConfigMap
        - name: RESEARCH_DEPTH
          valueFrom:
            configMapKeyRef:
              name: enhanced-agent-config
              key: RESEARCH_DEPTH
        - name: MAX_CONCURRENT_REQUESTS
          valueFrom:
            configMapKeyRef:
              name: enhanced-agent-config
              key: MAX_CONCURRENT_REQUESTS
        - name: CACHE_ENABLED
          valueFrom:
            configMapKeyRef:
              name: enhanced-agent-config
              key: CACHE_ENABLED
        - name: AI_PROVIDER
          valueFrom:
            configMapKeyRef:
              name: enhanced-agent-config
              key: AI_PROVIDER
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: enhanced-agent-config
              key: PORT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: enhanced-agent-config
              key: LOG_LEVEL
        - name: METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: enhanced-agent-config
              key: METRICS_ENABLED
        - name: PROMETHEUS_PORT
          valueFrom:
            configMapKeyRef:
              name: enhanced-agent-config
              key: PROMETHEUS_PORT
        - name: SERVICE_NAME
          valueFrom:
            configMapKeyRef:
              name: enhanced-agent-config
              key: SERVICE_NAME
        - name: NAMESPACE
          valueFrom:
            configMapKeyRef:
              name: enhanced-agent-config
              key: NAMESPACE
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: enhanced-agent-config
              key: REDIS_URL
        # Load secrets
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: OPENAI_API_KEY
        - name: GROQ_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: GROQ_API_KEY
              optional: true
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: ANTHROPIC_API_KEY
              optional: true
        # Pod metadata for service discovery
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - research-agent-enhanced
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "gomind.ai/research"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: enhanced-agent-service
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: research-agent-enhanced
    app.kubernetes.io/component: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: research-agent-enhanced
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: enhanced-agent-service-account
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: research-agent-enhanced
    app.kubernetes.io/component: service-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: enhanced-agent-role
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: research-agent-enhanced
    app.kubernetes.io/component: role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: enhanced-agent-role-binding
  namespace: gomind-examples
  labels:
    app.kubernetes.io/name: research-agent-enhanced
    app.kubernetes.io/component: role-binding
subjects:
- kind: ServiceAccount
  name: enhanced-agent-service-account
  namespace: gomind-examples
roleRef:
  kind: Role
  name: enhanced-agent-role
  apiGroup: rbac.authorization.k8s.io